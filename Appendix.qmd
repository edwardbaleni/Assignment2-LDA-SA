---
title: "Appendix"
---

```{r, echo = FALSE, warning=FALSE, message=FALSE}
### Libraries

library(tidyverse)
library(tidytext)
library(tokenizers)
library(gghighlight)
library(tictoc)
library(ggpubr)

### Load Data

load("SonaData.RData")
load("dsfi-lexicons.Rdata")

### Separate speeches into sentences and sentences into words

unnest_reg = "[^\\w_#@']"

speechSentences = as_tibble(sona) %>%
  rename(president = president_13) %>%
  unnest_tokens(sentences, speech, token = "sentences") %>%
  select(president, year, sentences) %>%
  mutate(sentences, sentences = str_replace_all(sentences, "’", "'")) %>%
  mutate(sentences, sentences = str_replace_all(sentences, "'", "")) %>%
  mutate(sentences, sentences = str_remove_all(sentences, "[0-9]")) %>%
  mutate(sentID = row_number())

wordsWithSentID = speechSentences %>% 
  unnest_tokens(word, sentences, token = 'regex', pattern = unnest_reg) %>%
  filter(str_detect(word, '[a-z]')) %>%
  filter(!word %in% stop_words$word) %>%
  select(sentID, president, year, word)

### Join with Sentiment Lexicon

wordsSentiment = wordsWithSentID %>% 
  left_join(bing, by = "word") %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), "neutral", bing_sentiment))

#head(wordsSentiment)
#table(wordsSentiment$bing_sentiment)
```

```{r, echo = FALSE}
### Count the positive and negative sentiments in each speech 

wordsSentiment %>%
  group_by(year, president) %>%
  filter(bing_sentiment == "positive") %>%
  count(bing_sentiment) %>%
  ggplot(aes(x = year, y = n, shape = president)) + 
  geom_point(col = "purple", size = 5, stroke = 2) +
  xlab("Year") + ylab("Number of Positive Sentiments in Speech") +
  theme_bw(base_size = 12) + 
  scale_x_discrete(name = "Year", 
                   breaks = c("1994","1999","2004", "2009", 
                              "2014", "2019", "2023")) +
  scale_shape_manual(values = c(5, 15, 1, 18, 0, 16))
```

[*Figure A: Positive Sentiment Over Time*]{.underline}

```{r, echo = FALSE}

wordsSentiment %>%
  group_by(year, president) %>%
  filter(bing_sentiment == "negative") %>%
  count(bing_sentiment) %>%
  ggplot(aes(x = year, y = n, shape = president)) + 
  geom_point(col = "orange", size = 5, stroke = 2) +
  xlab("Year") + ylab("Number of Negative Sentiments in Speech") + 
  theme_bw(base_size = 12) + 
  scale_x_discrete(name = "Year", 
                   breaks = c("1994","1999","2004", "2009", 
                              "2014", "2019", "2023")) +
  scale_shape_manual(values = c(5, 15, 1, 18, 0, 16))
```

[*Figure B: Negative Sentiment Over Time*]{.underline}

```{r Negation, echo=FALSE}
# Tokenize into bigram
bigram <- speechSentences %>% 
  unnest_tokens(word, sentences, token = 'ngrams', n = 2)

# Collect some negation words from qdap dictionary
negation_words <-  qdapDictionaries::negation.words
clean <- function(x){
  hold <- str_replace_all(x, "’", "'")
  hold <- str_replace_all(x, "'", "")  
}
negation_words <- unlist(lapply(negation_words, clean))

# Remove negation words from list of stop words
stop_words <- stop_words %>%
  filter(!word %in% negation_words)


bigrams_separated <- bigram %>%
  separate(word, c("word1", "word2"), sep = " ")

# Filter out stop words
bigrams_filtered <- bigrams_separated %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word)

# Unite bigram
bigrams_unite <- bigrams_filtered %>%
  unite(word1, word2)

# Obtain the negated words
negated_words <- bigrams_filtered %>%
  filter(word1 %in% negation_words) %>%
  inner_join(afinn, by = c(word2 = "word")) %>%
  count(word1, word2, value, sort = TRUE) %>%
  arrange(desc(n))

# Sentiment of a bigram
# reverse the sentiment of word2 whenever it is preceded by a negation word, and then add up the number of positive and negative words within a bigram and take the difference.
bigrams_filtered <- bigrams_filtered %>% 
  # add sentiment for word 1
  left_join(bing, by = c(word1 = 'word')) %>%
  rename(sentiment1 = sentiment) %>%
  mutate(sentiment1 = ifelse(is.na(sentiment1), 'neutral', sentiment1)) %>%
  # add sentiment for word 2
  left_join(bing, by = c(word2 = 'word')) %>%
  rename(sentiment2 = sentiment) %>%
  mutate(sentiment2 = ifelse(is.na(sentiment2), 'neutral', sentiment2)) %>%
  select(word1, word2, sentiment1, sentiment2, everything())

# Reverse sentiment of negated words
bigrams_filtered <- bigrams_filtered %>%
  mutate(opp_sentiment2 = recode(sentiment2, 
                                 'positive' = 'negative',
                                 'negative' = 'positive',
                                 'neutral' = 'neutral')) %>%
  mutate(sentiment2 = ifelse(word1 %in% negation_words, opp_sentiment2, sentiment2)) %>%
  select(-opp_sentiment2)

# Obtaining the net sentiment of the bigrams
bigrams_filtered <- bigrams_filtered %>%
  mutate(net_sentiment = (sentiment1 == 'positive') + (sentiment2 == 'positive') - 
           (sentiment1 == 'negative') - (sentiment2 == 'negative')) %>%
  unite(bigram, word1, word2, sep = ' ', remove = FALSE)

# Positive bigrams
# bigrams_filtered %>%
#   filter(net_sentiment > 0) %>% # get positive bigrams
#   count(bigram, sort = TRUE) %>%
#   filter(rank(desc(n)) < 20) %>%
#   ggplot(aes(reorder(bigram,n),n)) + geom_col() + coord_flip() + xlab('Frequency') + theme_bw()
# 
# # Negative biagrams
# bigrams_filtered %>%
#   filter(net_sentiment < 0) %>% # get negative bigrams
#   count(bigram, sort = TRUE) %>%
#   filter(rank(desc(n)) < 20) %>%
#   ggplot(aes(reorder(bigram,n),n)) + geom_col() + coord_flip() + xlab('Frequency') +theme_bw()

# Negated bigrams
bigrams_filtered %>%
  filter(net_sentiment < 0) %>% # get negative bigrams
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col() + coord_flip() + xlab('Frequency') +theme_bw()
```

```{r Negated Words per President, echo=FALSE}
# Negated bigrams
# s3 <- bigrams_filtered %>%
#   filter(net_sentiment < 0) %>% # get negative bigrams
#     filter(president == "deKlerk") %>%
#   filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
#   count(bigram, sort = TRUE) %>%
#   filter(rank(desc(n)) < 20) %>%
#     arrange(desc(n)) %>%
#   mutate(id = 1:dim(.)[1]) %>%
#   filter(id <= 15) %>%
#   ggplot(aes(reorder(bigram,n),n)) + geom_col() + coord_flip() + xlab('Frequency') +theme_bw()

s3.1 <- bigrams_filtered %>%
  filter(net_sentiment > 0) %>% # get negative bigrams
    filter(president == "deKlerk") %>%
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col(fill = "pink", col = "black") + coord_flip() + xlab("") + ylab("Frequency") +theme_bw()

# Negated bigrams
s6 <- bigrams_filtered %>%
  filter(net_sentiment < 0) %>% # get negative bigrams
  filter(president == "Zuma") %>%
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col(fill = "red", col = "black")+ coord_flip() + ylab('Frequency')+ 
  xlab("") +theme_bw() + ggtitle("Zuma")

s6.1 <- bigrams_filtered %>%
  filter(net_sentiment > 0) %>% # get negative bigrams
  filter(president == "Zuma") %>%
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col(fill = "pink", col = "black")+ coord_flip() + ylab('Frequency')+ 
  xlab("") +theme_bw() + ggtitle("Zuma")


# Negated bigrams
s9 <- bigrams_filtered %>%
  filter(net_sentiment < 0) %>% # get negative bigrams
    filter(president == "Ramaphosa") %>%
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col(fill = "red", col = "black") + coord_flip() + ylab('Frequency')+ 
  xlab("") + theme_bw(base_size = 12) +
  gghighlight(id <= 7) + ggtitle("Ramaphosa")

s9.1 <- bigrams_filtered %>%
  filter(net_sentiment > 0) %>% # get negative bigrams
    filter(president == "Ramaphosa") %>%
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col(fill = "pink", col = "black") + coord_flip() + ylab('Frequency')+ 
  xlab("") + theme_bw(base_size = 12)  + ggtitle("Ramaphosa")

# Negated bigrams
s12 <- bigrams_filtered %>%
  filter(net_sentiment < 0) %>% # get negative bigrams
      filter(president == "Motlanthe") %>%
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col(fill = "red", col = "black")+ coord_flip() + ylab('Frequency')+ 
  xlab("") + theme_bw(base_size = 12) +
  gghighlight(id <= 7) + ggtitle("Motlanthe")

s12.1 <- bigrams_filtered %>%
  filter(net_sentiment > 0) %>% # get negative bigrams
      filter(president == "Motlanthe") %>%
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col(fill = "pink", col = "black")+ coord_flip() + ylab('Frequency')+ 
  xlab("") + theme_bw(base_size = 12) + ggtitle("Motlanthe")
# Negated bigrams
s15 <-  bigrams_filtered %>%
  filter(net_sentiment < 0) %>% # get negative bigrams
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  filter(president == "Mbeki") %>%
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col(fill = "red", col = "black") + coord_flip() + ylab('Frequency')+ 
  xlab("") + theme_bw(base_size = 12) +
  gghighlight(id <= 9) + ggtitle("Mbeki")

s15.1 <-  bigrams_filtered %>%
  filter(net_sentiment > 0) %>% # get negative bigrams
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  filter(president == "Mbeki") %>%
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + geom_col(fill = "pink", col = "black") + coord_flip() + ylab('Frequency')+ 
  xlab("") + theme_bw(base_size = 12) + ggtitle("Mbeki")

# Negated bigrams
s18 <- bigrams_filtered %>%
  filter(net_sentiment < 0) %>% # get negative bigrams
    filter(president == "Mandela") %>%
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + 
  geom_col(fill = "red", col = "black") + 
  coord_flip() + 
  ylab('Frequency') + 
  xlab("") +
  theme_bw(base_size = 12) + 
  ggtitle("Mandela")

s18.1 <- bigrams_filtered %>%
  filter(net_sentiment > 0) %>% # get negative bigrams
    filter(president == "Mandela") %>%
  filter(word1 %in% negation_words) %>% # get bigrams where first word is negation
  count(bigram, sort = TRUE) %>%
  filter(rank(desc(n)) < 20) %>%
    arrange(desc(n)) %>%
  mutate(id = 1:dim(.)[1]) %>%
  filter(id <= 10) %>%
  ggplot(aes(reorder(bigram,n),n)) + 
  geom_col(fill = "pink", col = "black") + 
  coord_flip() + 
  ylab('Frequency') + 
  xlab("") +
  theme_bw(base_size = 12) + 
  ggtitle("Mandela")

```

[*Figure C: The most commonly occurring negated bigrams.*]{.underline}

```{r Negated Bigrams per President, echo=FALSE}
ggarrange( s6, s9, s12, s15, s18, ncol=2, nrow=3)
```

[*Figure D: The most commonly used negated positive words used by each president.*]{.underline}

```{r Negated Positive Bigrams per President, echo=FALSE}
ggarrange( s3.1, s6.1, s9.1, s12.1, s15.1, s18.1, ncol=2, nrow=3)
```

[*Figure E The most commonly used negated negative words used by each president.*]{.underline}

```{r Log Beta Code, echo=FALSE}

speechTDF = wordsWithSentID %>%
  group_by(president, word) %>%
  count() %>%  
  ungroup() 

dtmSpeech = speechTDF %>% 
  cast_dtm(president, word, n)

kSeq = 2:4
topicsList = list()

for (k in kSeq){
  
  speechLDA = LDA(dtmSpeech, k = k, control = list(seed = 2023))
  
  speechTopics = tidy(speechLDA, matrix = 'beta')
  
  topicsList[[k-1]] = speechTopics
  
}

names(topicsList) = c("Two", "Three", "Four")

chosenTopic = topicsList$Four

# compare terms with the greatest difference in Betas between topics
# plots are for all comparisons, assess and visualise for importance

wideBeta = function(speechTopics, k, thresh){
  
  if (k == 2){
    
    betaWide = speechTopics %>%
      mutate(topic = paste0("topic", topic)) %>%
      pivot_wider(names_from = topic, values_from = beta) %>% 
      filter(topic1 > thresh | topic2 > thresh) %>%
      mutate(log_ratio1.2 = log2(topic2 / topic1))
  }
  
  if (k == 3){
    
    betaWide = speechTopics %>%
      mutate(topic = paste0("topic", topic)) %>%
      pivot_wider(names_from = topic, values_from = beta) %>% 
      filter(topic1 > thresh | topic2 > thresh | topic3 > thresh) %>%
      mutate(log_ratio1.2 = log2(topic2 / topic1)) %>%
      mutate(log_ratio1.3 = log2(topic3 / topic1)) %>%
      mutate(log_ratio2.3 = log2(topic3 / topic2))
  }
  
  if (k == 4){
    
    betaWide = speechTopics %>%
      mutate(topic = paste0("topic", topic)) %>%
      pivot_wider(names_from = topic, values_from = beta) %>% 
      filter(topic1 > thresh | topic2 > thresh | topic3 > thresh | topic4 > thresh ) %>%
      mutate(log_ratio1.2 = log2(topic2 / topic1)) %>%
      mutate(log_ratio1.3 = log2(topic3 / topic1)) %>%
      mutate(log_ratio1.4 = log2(topic4 / topic1)) %>%
      mutate(log_ratio2.3 = log2(topic3 / topic2)) %>%
      mutate(log_ratio2.4 = log2(topic4 / topic2)) %>%
      mutate(log_ratio3.4 = log2(topic4 / topic3)) 
  }
  
  return(betaWide)
}

betaWide = wideBeta(chosenTopic, k = 4, thresh = 0.001)

```

```{r Log Beta Plots, echo=FALSE}

b1 = betaWide %>%
  select(term, log_ratio1.2) %>%
  filter(abs(log_ratio1.2) >= 10) %>%
  mutate(pos = log_ratio1.2 >= 0) %>%
  ggplot(aes(reorder(term, log_ratio1.2), log_ratio1.2, fill = pos)) +
  geom_bar(stat = "identity", position = 'dodge') + 
  coord_flip() + xlab("") + ylab("Beta Log2 Ratio between Topic 2 and 1") +
  scale_fill_manual(values=c("black", "deeppink")) +
  guides(fill = "none") +
  theme_bw(base_size = 12)

b2 = betaWide %>%
  select(term, log_ratio1.3) %>%
  filter(abs(log_ratio1.3) >= 50) %>%
  mutate(pos = log_ratio1.3 >= 0) %>%
  ggplot(aes(reorder(term, log_ratio1.3), log_ratio1.3, fill = pos)) +
  geom_bar(stat = "identity", position = 'dodge') + 
  coord_flip() + xlab("") + ylab("Beta Log2 Ratio between Topic 3 and 1") +
  scale_fill_manual(values=c("black", "deepskyblue")) +
  guides(fill = "none") +
  theme_bw(base_size = 12)

b3 = betaWide %>%
  select(term, log_ratio1.4) %>%
  filter(abs(log_ratio1.4) >= 200) %>%
  mutate(pos = log_ratio1.4 >= 0) %>%
  ggplot(aes(reorder(term, log_ratio1.4), log_ratio1.4, fill = pos)) +
  geom_bar(stat = "identity", position = 'dodge') + 
  coord_flip() + xlab("") + ylab("Beta Log2 Ratio between Topic 4 and 1") +
  scale_fill_manual(values=c("black", "darkorchid")) +
  guides(fill = "none") +
  theme_bw(base_size = 12)

b4 = betaWide %>%
  select(term, log_ratio2.3) %>%
  filter(abs(log_ratio2.3) >= 10) %>%
  mutate(pos = log_ratio2.3 >= 0) %>%
  ggplot(aes(reorder(term, log_ratio2.3), log_ratio2.3, fill = pos)) +
  geom_bar(stat = "identity", position = 'dodge') + 
  coord_flip() + xlab("") + ylab("Beta Log2 Ratio between Topic 3 and 2") +
  scale_fill_manual(values=c("deeppink", "deepskyblue")) +
  guides(fill = "none") +
  theme_bw(base_size = 12)

b5 = betaWide %>%
  select(term, log_ratio2.4) %>%
  filter(abs(log_ratio2.4) >= 10) %>%
  mutate(pos = log_ratio2.4 >= 0) %>%
  ggplot(aes(reorder(term, log_ratio2.4), log_ratio2.4, fill = pos)) +
  geom_bar(stat = "identity", position = 'dodge') + 
  coord_flip() + xlab("") + ylab("Beta Log2 Ratio between Topic 4 and 2") +
  scale_fill_manual(values=c("deeppink", "darkorchid")) +
  guides(fill = "none") +
  theme_bw(base_size = 12)

b6 = betaWide %>%
  select(term, log_ratio3.4) %>%
  filter(abs(log_ratio3.4) >= 100) %>%
  mutate(pos = log_ratio3.4 >= 0) %>%
  ggplot(aes(reorder(term, log_ratio3.4), log_ratio3.4, fill = pos)) +
  geom_bar(stat = "identity", position = 'dodge') + 
  coord_flip() + xlab("") + ylab("Beta Log2 Ratio between Topic 4 and 3") +
  scale_fill_manual(values=c("deepskyblue", "darkorchid")) +
  guides(fill = "none") +
  theme_bw(base_size = 12)

#ggarrange(b1, b2, b3, b4, b5, b6, ncol = 2, nrow = 3)

```

```{r Beta Arranged Plots T1, echo=FALSE, fig.height=9, fig.width=12}

ggarrange(b1, b2, b3, ncol = 1, nrow = 3)
```

[*Figure F Words with the greatest difference in beta values between Topic 1 and the other Topics.*]{.underline}

```{r Beta Arranged Plots T2, echo=FALSE, fig.height=6, fig.width=12}

ggarrange(b4, b5, ncol = 1, nrow = 2)
```

[*Figure G Words with the greatest difference in beta values between Topic 2 and Topics 3 and 4.*]{.underline}

```{r Beta Arranged Plots T3, echo=FALSE, fig.height=3, fig.width=12}

ggarrange(b6, ncol = 1, nrow = 1)
```
[*Figure H Words with the greatest difference in beta values between Topic 3 and Topic 4.*]{.underline}
